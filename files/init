#!/bin/bash

# Copyright 2012-2018 Jonathan Vasquez <jon@xyinn.org>
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# ========== Variables ==========
_version="0"

_use_luks=0
_use_raid=0
_use_lvm=0
_use_zfs=0
_use_addon=0

_modules=""

_new_root="/mnt/root"
_init="/sbin/init"
_key_drive="/mnt/key"
_embedded_keyfile="/etc/keyfile"
_cache_file="/etc/zfs/zpool.cache"
_rootfs_cache_file="${_new_root}${_cache_file}"


# Hostnames for initrd and rootfs
_hostn="initrd"
_rhostn="rootfs"

# Starts a rescue shell
RescueShell()
{
    Warn "Booting into rescue shell..." && NewLine
    hostname "${_hostn}" && setsid cttyhack /bin/bash -l
}

# Module loading function
LoadModules()
{
    if [[ ${_use_zfs} -eq 1 ]] || [[ ${_use_addon} -eq 1 ]]; then
        Info "Loading modules..."

        for module in ${_modules}; do
            modprobe ${module}
        done
    fi
}

# Cleanly mounts the required devices
MountRequiredDevices()
{
    Info "Mounting kernel devices..."

    mount -t proc none /proc
    mount -t devtmpfs none /dev
    mount -t sysfs none /sys
    mount -t tmpfs -o mode=755,nodev none /run
}

# Cleanly umounts the required devices
UnmountRequiredDevices()
{
    Info "Unmounting kernel devices..."

    umount -l /proc
    umount -l /dev
    umount -l /sys
}

# Mounts /run onto the rootfs before switching
PremountRunOnNewRoot()
{
    Info "Premounting /run onto the rootfs..."

    # Mounts /run onto the rootfs before switching. Mounting this is a requirement
    # to implement the systemd initrd interface. Without this, I've experienced that
    # the luks decrypted drives passed through 'enc_devices' would actually stall systemd
    # for 1m30s if they were listed in /etc/fstab.

    # Link: http://www.freedesktop.org/wiki/Software/systemd/InitrdInterface/
    local targetRunDirectory="${_new_root}"/run
    mount --rbind /run "${targetRunDirectory}" || Fail "Failed to bind /run into the rootfs!"
}

# Loads the user's keymap if it exists
LoadKeymapIfNeeded()
{
    local path_to_keymap="/etc/keymap"

    if [[ -f ${path_to_keymap} ]]; then
        Info "Loading keymap..."
        loadkeys "${path_to_keymap}" 1> /dev/null || Warn "There was an error loading the keymap file. Ignoring."
    fi
}

# Parses an individual parameter from the command line
ParseOption()
{
    echo "${1#*=}"
}

# Starts udev and udevadm
StartUdev()
{
    Info "Starting udev..."
    udevd --daemon --resolve-names=never 2> /dev/null
    GenerateDeviceLinks
}

# Starts udevadm and generates the device symlinks (uuid, label, etc)
GenerateDeviceLinks()
{
    udevadm trigger
    udevadm settle
}

# Stops udev from running so that we don't have problems when systemd attempts to run udev itself
StopUdev()
{
    Info "Stopping udev..."
    killall udevd
}

# Process command line parameters
ParseKernelParameters()
{
    Info "Parsing kernel parameters..."

    for param in $(</proc/cmdline); do
        case "${param}" in
        root=*)
            _root=$(RetrieveDriveValue "${param}")
            ;;
        options=*)
            _options=$(ParseOption "${param}")
            ;;
        usr=*)
            _usr=$(ParseOption "${param}")
            ;;
        enc_options=*)
            _enc_options=$(ParseOption "${param}")
            ;;
        enc_drives=*)
            _enc_drives=$(ParseOption "${param}")
            ;;
        enc_targets=*)
            _enc_targets=$(ParseOption "${param}")
            ;;
        enc_type=*)
            _enc_type=$(ParseOption "${param}")
            ;;
        enc_key=*)
            _enc_key=$(ParseOption "${param}")
            ;;
        enc_key_drive=*)
            _enc_key_drive=$(RetrieveDriveValue "${param}")
            ;;
        enc_key_ignore)
            _enc_key_ignore=1
            ;;
        enc_tries=*)
            _enc_tries=$(ParseOption "${param}")
            ;;
        init=*)
            _init=$(ParseOption "${param}")
            ;;
        by=*)
            _by=$(ParseByOption "${param}")
            ;;
        refresh)
            _refresh=1
            ;;
        recover)
            _recover=1
            ;;
        su)
            _su=1
            ;;
        redetect)
            _redetect=1
            ;;
        triggers=*)
            IFS="," read -a _triggers <<< $(ParseOption "${param}")
            ;;
        esac
    done

    if [[ -z ${_root} ]]; then
        Fail "You must pass the 'root' variable."
    fi
}

# Parses and sets the 'by' value so that we can have
# a more sanitized path for scanning the devices directories
# later on when we try to mount our zpool.
ParseByOption()
{
    if [[ -z $1 ]]; then
        Fail "No 'by' value was passed into this function!"
    fi

    # Set the following shell property so that we can
    # match regardless of case. This property will be unset
    # at the end of the function.
    shopt -s nocasematch

    local option=$(ParseOption "$1")

    case "${option}" in
        dev)
            echo "/dev"
            ;;
        id)
            echo "/dev/disk/by-id"
            ;;
        uuid)
            echo "/dev/disk/by-uuid"
            ;;
        partuuid)
            echo "/dev/disk/by-partuuid"
            ;;
        label)
            echo "/dev/disk/by-label"
            ;;
        partlabel)
            echo "/dev/disk/by-partlabel"
            ;;
        *)
            echo "${tempDrive}"
            ;;
    esac

    shopt -u nocasematch
}

# Retrieves the proper value for the encrypted key drive
RetrieveDriveValue()
{
    if [[ -z $1 ]]; then
        Fail "No key drive was passed into the function!"
    fi

    local tempDrive=$(ParseOption "$1")

    case "${tempDrive}" in
        ID=*)
            eval "${tempDrive}"
            echo "/dev/disk/by-id/${ID}"
            ;;
        UUID=*)
            eval "${tempDrive}"
            echo "/dev/disk/by-uuid/${UUID}"
            ;;
        PARTUUID=*)
            eval "${tempDrive}"
            echo "/dev/disk/by-partuuid/${PARTUUID}"
            ;;
        LABEL=*)
            eval "${tempDrive}"
            echo "/dev/disk/by-label/${LABEL}"
            ;;
        PARTLABEL=*)
            eval "${tempDrive}"
            echo "/dev/disk/by-partlabel/${PARTLABEL}"
            ;;
        *)
            echo "${tempDrive}"
            ;;
    esac
}

# Extract all the drives needed to decrypt before mounting the pool
GetDrivesNeededToDecrypt()
{
    if [[ -z ${_enc_drives} ]]; then
        Ask "Please enter your encrypted drives: " && read _enc_drives

        if [[ -z ${_enc_drives} ]]; then
            Fail "No encrypted drives have been entered."
        fi
    fi

    IFS="," read -a tempDrives <<< "${_enc_drives}"
    
    for i in "${!tempDrives[@]}"; do
        case ${tempDrives[i]} in
            UUID=*)
                eval "${tempDrives[i]}"
                _drives+=("/dev/disk/by-uuid/${UUID}")
                ;;
            PARTUUID=*)
                eval "${tempDrives[i]}"
                _drives+=("/dev/disk/by-partuuid/${PARTUUID}")
                ;;
            LABEL=*)
                eval "${tempDrives[i]}"
                _drives+=("/dev/disk/by-label/${LABEL}")
                ;;
            PARTLABEL=*)
                eval "${tempDrives[i]}"
                _drives+=("/dev/disk/by-partlabel/${PARTLABEL}")
                ;;
            ID=*)
                eval "${tempDrives[i]}"
                _drives+=("/dev/disk/by-id/${ID}")
                ;;
            /dev/*)
                _drives+=(${tempDrives[i]})
                ;;
        esac
    done

    for i in "${!_drives[@]}"; do
        Flag "Drive `expr ${i} + 1`: ${_drives[i]}"
    done

    unset tempDrives
}

# Gets a decryption key without displaying it on screen
GetDecryptionKey()
{
    unset _code

    if [[ $1 == "pass" ]]; then
        while [[ -z ${_code} ]]; do
            Ask "Enter passphrase: " && read -s _code && NewLine
        done
    elif [[ $1 == "key_gpg" ]]; then
        while [[ -z ${_code} ]]; do
            Ask "Enter decryption key: " && read -s _code && NewLine
        done
    else
        Fail "Either a decryption type wasn't passed or it's not supported!"
    fi
}

# Returns the encryption type that will be used interactively from the user
AskEncryptionType()
{
    local choice=""

    Info "Please enter the encryption type that will be used:"
    Flag "1. Passphrase"
    Flag "2. Keyfile"
    Flag "3. Encrypted Keyfile"
    Ask "Current choice [1]: " && read choice

    local isResponseValid="no"

    while [[ ${isResponseValid} == "no" ]]; do
        case "${choice}" in
        ""|1)
            _enc_type="pass"
            isResponseValid="yes"
            ;;
        2)
            _enc_type="key"
            isResponseValid="yes"
            ;;
        3)
            _enc_type="key_gpg"
            isResponseValid="yes"
            ;;
        *)
            Ask "Invalid input. Please enter a correct choice: "
            read choice
            ;;
        esac
    done
}

# Prints the available drives
PrintAvailableDrives()
{
    Info "Detecting available drives..." && sleep "${_timer}" && ls /dev/[sv]d*
}

# Detects the available drives
DetectAvailableDrives()
{
    _timer=3

    if [[ -z ${_redetect} ]]; then
        PrintAvailableDrives
    else
        local keepGoing="yes"

        while [[ ${keepGoing} == "yes" ]]; do
            PrintAvailableDrives

            local choice=""
            Ask "Do you want to re-detect the drives? [y/N]: " && read choice
            _timer=0

            if [[ ${choice} != "y" ]] && [[ ${choice} != "Y" ]]; then
                keepGoing="no"
            fi
        done
    fi
}

# If "use_luks" is enabled, luks specific code will be ran
LuksTrigger()
{
    Info "Gathering encrypted devices..." && GetDrivesNeededToDecrypt

    # If we already have a keyfile in the initrd, but we don't want to ignore it,
    # then we will try to use it to decrypt our drives. This was implemented in order to
    # reduce the number of passphrases that are needed to be typed after GRUB decrypts a
    # / partition that contains /boot inside of it.
    if [[ -f ${_embedded_keyfile} ]] && [[ ${_enc_key_ignore} -ne 1 ]]; then
        if [[ -z ${_enc_type} ]] || [[ ${_enc_type} != "key" ]]; then
            Fail "You must set your \"enc_type\" to \"key\" if you want to use your embedded keyfile."
        fi

        _keyfile="${_embedded_keyfile}"
    else
        PrepareForLuks
    fi

    # Attempt to decrypt the drives
    DecryptDrives

    # If we ignored the embedded keyfile before, then that means
    # that we possibly might need to unmount the key drive (If key or key_gpg
    # was the enc_type).
    if [[ ${_enc_key_ignore} -eq 1 ]]; then
        UnmountKeyfileDriveIfNeeded
    fi
}

# Gathers the required LUKS related information from the user.
# (including mounting the drive with the user's keyfile)
PrepareForLuks()
{

	Info "Entering prepareForLuks()"

    # If the user left their _enc_type blank (Could be intentional),
    # then let's ask them now to select the type.
    if [[ -z ${_enc_type} ]]; then
        AskEncryptionType

        if [[ -z ${_enc_type} ]]; then
            Fail "The encryption type was not set."
        fi
    fi

    if [[ ${_enc_type} != "pass" ]] && [[ ${_enc_type} != "key" ]] && [[ ${_enc_type} != "key_gpg" ]]; then
        Fail "Invalid 'enc_type' option. Only 'pass', 'key', and 'key_gpg' are supported."
    fi

    # Gathers information required (passphrase, keyfile location, etc)
    if [[ ${_enc_type} == "pass" ]]; then
        GetDecryptionKey "pass"
    elif [[ ${_enc_type} == "key" ]] || [[ ${_enc_type} == "key_gpg" ]]; then
        # What drive is the keyfile in?
        if [[ -z ${_enc_key_drive} ]]; then
            DetectAvailableDrives
            Ask "Enter drive where keyfile is located: " && read _enc_key_drive

            if [[ -z ${_enc_key_drive} ]]; then
                Fail "Error setting path to keyfile's drive!"
            fi
        fi

        # What is the path to the keyfile?
        if [[ -z ${_enc_key} ]]; then
            Ask "Enter path to keyfile: " && read _enc_key

            if [[ -z ${_enc_key} ]]; then
                Fail "Error setting path to keyfile!"
            fi
        fi

        # What is the decryption key for the keyfile?
        if [[ ${_enc_type} == "key_gpg" ]]; then
            GetDecryptionKey "key_gpg"
        fi

		# some slow USB sticks might not be ready yet. Re-Trigger udevadm and wait
		Info "re-trigger udev for slow USB sticks, wait 5 seconds..."
		udevadm trigger	
		
		sleep 5

        # Mount the drive
        mount "${_enc_key_drive}" "${_key_drive}" || Fail "Failed to mount your key drive"

        # Set path to keyfile
        _keyfile="${_key_drive}/${_enc_key}"
    fi
}

# Unmounts the drive with the keyfile if we had one
UnmountKeyfileDriveIfNeeded()
{
    if [[ ${_enc_type} == "key" ]] || [[ ${_enc_type} == "key_gpg" ]]; then
        umount "${_key_drive}"

        if [[ $? -ne 0 ]]; then
            Warn "Error unmounting your key drive"
        else
            Info "Your key drive has been unmounted successfully."
        fi
    fi
}

# Validate the maximum tries for decryption
ValidateMaximumTries()
{
    local maximumTryValue=5

    if [[ -z ${_enc_tries} ]]; then
        _enc_tries=${maximumTryValue}
    elif [[ ! ${_enc_tries} -gt 0 ]]; then
        _enc_tries=${maximumTryValue}
    fi
}

# Attempts to decrypt the drives
DecryptDrives()
{
    if [[ -z ${_drives[@]} ]]; then
        Fail "Failed to get encrypted drives. The 'drives' value is empty."
    fi

    # Make sure that the maximum amount of tries is set correctly
    ValidateMaximumTries

    # Set up a counter in case the user gave an incorrect passphrase/key_gpg decryption code
    local count=0
    local max="${_enc_tries}"

    if [[ ! -z ${_enc_targets// } ]]; then
        IFS="," read -a tempTargets <<< "${_enc_targets}"
    fi 

    for i in "${!_drives[@]}"; do
    
        if [[ -z ${tempTargets[i]// } ]]; then
            vaultname=vault_${i}
        else
            vaultname=${tempTargets[i]}
        fi
            
        if [[ ${_enc_type} == "pass" ]]; then
            while [[ ${count} -lt ${max} ]]; do
                # Putting the _enc_options var in double quotes _will_ cause cryptsetup to fail
                # and display an "unknown option" message.
                echo "${_code}" | cryptsetup ${_enc_options} luksOpen "${_drives[i]}" "${vaultname}" && break

                if [[ $? -ne 0 ]]; then
                    count=$((count + 1))

                    # If the user kept failing and reached their max tries,
                    # then throw them into a rescue shell
                    if [[ ${count} -eq ${max} ]]; then
                        Fail "Failed to decrypt: ${_drives[i]}"
                    else
                        GetDecryptionKey "pass"
                    fi
                fi
            done
        elif [[ ${_enc_type} == "key" ]]; then
            if [[ ! -e ${_keyfile} ]]; then
                Fail "The keyfile doesn't exist in this path: ${_keyfile}"
            fi

            cryptsetup --key-file "${_keyfile}" ${_enc_options} luksOpen "${_drives[i]}" "${vaultname}"

            if [[ $? -ne 0 ]]; then
                Fail "Failed to decrypt ${_drives[i]}!"
            else
                Flag "${_drives[i]} opened -> ${vaultname}"
            fi
        elif [[ ${_enc_type} == "key_gpg" ]]; then
            if [[ ! -e ${_keyfile} ]]; then
                Fail "The keyfile doesn't exist in this path: ${_keyfile}"
            fi

            while [[ ${count} -lt ${max} ]]; do
                echo "${_code}" | gpg --batch --passphrase-fd 0 -q -d "${_keyfile}" 2> /dev/null | \
                cryptsetup --key-file=- ${_enc_options} luksOpen ${_drives[i]} ${vaultname} && break

                if [[ $? -ne 0 ]]; then
                    count=$((count + 1))

                    # If the user kept failing and reached their max tries,
                    # then throw them into a rescue shell
                    if [[ ${count} -eq ${max} ]]; then
                        Fail "Failed to decrypt: ${_drives[i]}"
                    else
                        GetDecryptionKey "pass"
                    fi
                fi
            done
        fi
    done
    
    unset tempTargets
}

# If "use_raid" is enabled, raid specific code will be ran
RaidTrigger()
{
    Info "Assembling your raid array..."

    # Scan for raid arrays and save them in mdadm.conf
    mdadm --examine --scan > /etc/mdadm.conf

    # Assemble all raid devices
    mdadm --assemble --scan
}

# If "use_lvm" is enabled, raid specific code will be ran
LvmTrigger()
{
    Info "Activating your logical volumes..."

    # Make LVM Volume Group/Pools available
    lvm vgchange -a y
    lvm vgscan --mknodes
}

# Retrieves the zpool.cache file from the rootfs
GetZpoolCacheFromSystem()
{
    Info "Retrieving zpool.cache from \"${_pool_name}\"..."

    if [[ -z "${_by}" ]]; then
        PrepForSafeZfsCommand && zpool import -f -N -o readonly=on "${_pool_name}"
    else
        PrepForSafeZfsCommand && zpool import -d "${_by}" -f -N -o readonly=on "${_pool_name}"
    fi

    PrepForSafeZfsCommand && mount -t zfs -o ro,zfsutil "${_root}" "${_new_root}"

    if [[ -f "${_rootfs_cache_file}" ]]; then
        cp "${_rootfs_cache_file}" /etc/zfs
        if [[ ! -f "${_cache_file}" ]]; then
            Warn "Unable to copy zpool.cache from \"${_pool_name}\"!"
        fi
    else
        Warn "zpool.cache file does not exist on \"${_pool_name}\"."
        Warn "It will automatically be copied into your system."
    fi

    # Let's also call the safe command before a normal unmount (since the unmount is ultimately acting on a zfs dataset)
    PrepForSafeZfsCommand && umount "${_new_root}"

    # Use -F (undocumented flag) so that the copied zpool.cache is not nuked.
    PrepForSafeZfsCommand && zpool export -F "${_pool_name}"
}

# If "use_zfs" is enabled, zfs specific code will be ran
ZfsTrigger()
{
    _pool_name="${_root%%/*}"

    Flag "Importing \"${_pool_name}\"..."

    # Use the system's cache file only if we don't want to reset it.
    if [[ ${_refresh} -ne 1 ]]; then
        GetZpoolCacheFromSystem
    fi

    if [[ -f "${_cache_file}" ]]; then
        # In order for this to be successful, the paths for each device in the zpool's
        # cache file need to be in the initramfs exactly as they were when the
        # pool was last explictly imported. In other words, the paths in the zpool.cache
        # for each drive must exist in the initramfs.
        Info "Loading zpool.cache..."
        PrepForSafeZfsCommand && zpool import -aN -c "${_cache_file}"

        if [[ $? -eq 0 ]]; then
            return
        fi

        Warn "Unable to load your cache file. Falling back to auto-detection."

        # Remove the existing cache file since it's useless at this point
        rm "${_cache_file}"
    fi

    # If the user specified the "by-<>" type that they would like to
    # use, then attempt to mount the pool from that directory.
    if [[ ! -z ${_by} ]]; then
        PrepForSafeZfsCommand && zpool import -d "${_by}" -f -N -o cachefile= "${_pool_name}" || \
        Fail "Failed to mount \"${_pool_name}\" from the \"${_by}\" directory."

        Info "Successfully mounted \"${_pool_name}\" using the \"${_by}\" directory."
    else
        _device_dirs=(
            /dev
            /dev/disk/by-*
        )

        local success=1

        for i in ${!_device_dirs[@]}; do
            local dir=${_device_dirs[i]}
            PrepForSafeZfsCommand && zpool import -d "${dir}" -f -N -o cachefile= "${_pool_name}"

            if [[ $? == 0 ]]; then
                Info "Successfully mounted \"${_pool_name}\" using the \"${dir}\" directory."
                success=0
                break
            fi
        done

        if [[ ${success} -eq 1 ]]; then
            Fail "Failed to mount \"${_pool_name}\" after scanning all the device directories."
        fi
    fi
}

# Mounts your rootfs
MountRoot()
{
    Info "Mounting rootfs..."

    # Using "" for the ${options} below so that if the user doesn't have any
    # options, the variable ends up expanding back to empty quotes and allows
    # the mount command to keep going.
    if [[ ${_use_zfs} -eq 1 ]]; then
        PrepForSafeZfsCommand && mount -t zfs -o zfsutil,"${options}" "${_root}" "${_new_root}" || \
        Fail "Failed to import your zfs root dataset!"

        if [[ ${_refresh} -eq 1 ]] || [[ ! -f "${_rootfs_cache_file}" ]]; then
            # Installs the cache generated by this initramfs run, to the rootfs.
            InstallZpoolCache
        fi
    else
        mount -o "${_options}" "${_root}" "${_new_root}" || \
        Fail "Failed to import your rootfs: ${_root}!"
    fi
}

# Mounts the /usr directory into your rootfs if it is separate
MountUsrIfNeeded()
{
    local usrFailMessage="Failed to mount \"${_usr}\" onto your rootfs!"

    if [[ ! -z ${_usr} ]]; then
        Info "Mounting /usr onto your rootfs..."
        local targetUsrDirectory="${_new_root}"/usr

        if [[ ${_use_zfs} -eq 1 ]]; then
            PrepForSafeZfsCommand && mount -t zfs -o zfsutil,"${options}" "${_usr}" "${targetUsrDirectory}" || Fail "${usrFailMessage}"
        else
            mount -o "${_options}" "${_usr}" "${targetUsrDirectory}" || Fail "${usrFailMessage}"
        fi
    fi
}

# Switches into your root device
SwitchToNewRoot()
{
    Info "Switching into rootfs..." && NewLine
    exec switch_root "${_new_root}" "${_init}"
}

# Runs a zfs specific command that will allow a subsequent zfs mount or unmount
# command to work properly without receiving a "device or resource busy" message.
PrepForSafeZfsCommand()
{
    # Using zfs list primarily for performance (zpool import is way slower because it tries to scan
    # the devices in order to see if it can find anything to import).
    # Normal commands that cause some sort of delay like if [[ $? -eq 0 ]] or 'sleep' will improve
    # the success rate of a subsequent mount command to work, but it still has a high chance to fail.
    # running a zfs specific command before calling a mount that mounts a zfs dataset seems to have a
    # 100% mount success rate.

    # Using "-H -t -o -s" flags so that if a system has a lot of snapshots, it doesn't slow things down.
    zfs list -H -t filesystem -o name -s name 2>&1 > /dev/null
    return 0
}

# Checks if a trigger is enabled, and if it is, it will run the trigger
# in the order specified in the trigger order variable (basically a stack)
CheckAndRunTriggers()
{
    for trigger in ${_triggers[@]}; do
        if [[ ${_use_luks} -eq 1 ]] && [[ ${trigger} == "luks" ]]; then
            LuksTrigger
        elif [[ ${_use_raid} -eq 1 ]] && [[ ${trigger} == "raid" ]]; then
            RaidTrigger
        elif [[ ${_use_lvm} -eq 1 ]] && [[ ${trigger} == "lvm" ]]; then
            LvmTrigger
        elif [[ ${_use_zfs} -eq 1 ]] && [[ ${trigger} == "zfs" ]]; then
            ZfsTrigger
        fi
    done
}

# Installs the zpool.cache to the rootfs
InstallZpoolCache()
{
    Info "Installing zpool.cache into \"${_pool_name}\"..."
    cp -f "${_cache_file}" "${_rootfs_cache_file}"
}

# Single User Mode
SingleUser()
{
    Warn "Booting into single user mode..." && NewLine

    mount --rbind /proc "${_new_root}"/proc
    mount --rbind /dev "${_new_root}"/dev
    mount --rbind /sys "${_new_root}"/sys
    mount --rbind /run "${_new_root}"/run

    setsid cttyhack /bin/bash -c "chroot ${_new_root} /bin/bash -c 'hostname ${_rhostn}' && chroot ${_new_root} /bin/bash -l"

    # Lazy unmount these devices from the rootfs since they will be fully
    # unmounted from the initramfs environment right after this function
    # is over.
    umount -l "${_new_root}"/proc "${_new_root}"/dev "${_new_root}"/sys "${_new_root}"/run
}

### Utility Functions ###

# Used for displaying information
Info()
{
    echo -e "\e[1;32m[*]\e[0;m ${*}"
}

# Used for input (questions, retrieving feedback from user)
Ask()
{
    echo -en "\e[1;37m[*]\e[0;m ${*}"
}

# Used for warnings
Warn()
{
    echo -e "\e[1;33m[!]\e[0;m ${*}"
}

# Used for flags
Flag()
{
    echo -e "\e[1;34m[+]\e[0;m ${*}"
}

# Used for errors
Fail()
{
    echo -e "\e[1;31m[#]\e[0;m ${*}" && RescueShell
}

# Prints empty line
NewLine()
{
    echo ""
}

# Shows the welcome message
WelcomeMessage()
{
    Info "Welcome to Bliss! [${_version}]"
}

# Prevent kernel from printing on screen
PreventVerboseKernel()
{
    echo 0 > /proc/sys/kernel/printk
}

### Let the games begin ###

WelcomeMessage
LoadKeymapIfNeeded
MountRequiredDevices || Fail "Failed to mount kernel devices"
PreventVerboseKernel
ParseKernelParameters
LoadModules || Fail "Failed to load kernel modules"
StartUdev

[[ ${_recover} -eq 1 ]] && RescueShell

CheckAndRunTriggers
MountRoot
MountUsrIfNeeded

[[ ${_su} -eq 1 ]] && SingleUser

# Clean up and switch into rootfs
StopUdev
UnmountRequiredDevices || Fail "Failed to unmount kernel devices"
PremountRunOnNewRoot
SwitchToNewRoot || Fail "Failed to switch into your root filesystem"
